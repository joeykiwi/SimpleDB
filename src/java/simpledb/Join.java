package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    
    private DbIterator m_child1;
    private DbIterator m_child2;
    private JoinPredicate m_jp;
    private Tuple m_last;
    private boolean m_newLast;
    
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	m_jp = p;
    	m_child1 = child1;
    	m_child2 = child2;
    	m_last = null;
    	m_newLast = true;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return m_jp;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return m_child1.getTupleDesc().getFieldName(m_jp.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return m_child2.getTupleDesc().getFieldName(m_jp.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(m_child1.getTupleDesc(), m_child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
    	m_child1.open();
    	m_child2.open();
    	m_last = null;
    	m_newLast = true;
    }

    public void close() {
        // some code goes here
    	super.close();
    	m_child1.close();
    	m_child2.close();
    	m_last = null;
    	m_newLast = true;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	m_child1.rewind();
    	m_child2.rewind();
    	m_last = null;
    	m_newLast = true;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	
    	if(m_child1==null || m_child2==null) {
    		return null;
    	}
    	
    	Tuple child1, child2;
    	
    	//update the tuple from m_child1
    	if(m_newLast) {
    		if(m_child1.hasNext())
    			m_last = m_child1.next();
    		else
    			return null;
    	}
    	
    	child1 = m_last;
    	
    	//choose the tuple to compare from m_child2
    	if(m_child2.hasNext()) {
    		child2 = m_child2.next();
    		m_newLast = false;
    	} else {
    		m_child2.rewind();
    		m_newLast = true;
    		return fetchNext();
    	}

		if (m_jp.filter(child1, child2)) {
			Tuple result = new Tuple(this.getTupleDesc());
			    
			//join tuple
	    	int i;
	    	int child1_fields = m_child1.getTupleDesc().numFields();
	    	for (i = 0; i < child1_fields; i++) {
	    		result.setField(i, child1.getField(i));
	    	}
	    	for ( ; i < this.getTupleDesc().numFields(); i++) {
	    		result.setField(i, child2.getField(i - child1_fields));
	    	}
	    	//join tuple end
			
			return result;
		} else {
			return fetchNext();
		}
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
    	DbIterator[] result = new DbIterator[2];
    	result[0] = m_child1;
    	result[1] = m_child2;
        return result;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	m_child1 = children[0];
    	m_child2 = children[1];
    }

}
